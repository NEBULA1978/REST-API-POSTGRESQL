Iniciar postges con docker:

docker run --name some-postgres -e POSTGRES_USER=next -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres

Conectarme al contenedor postgres con consola de bash :

<◂> docker exec -it some-postgres bash
root@8ce9d627f638:/# 

PARA INICIAR \l ejecutamos:

Para ejecutar el comando "\l", debes primero iniciar el intérprete de comandos "psql" dentro del contenedor de PostgreSQL ejecutando el siguiente comando:

lua

psql -U next
Y me fubnciona \l

Creamos base de datos gorm:

next=# CREATE DATABASE gorm;
CREATE DATABASE
next=#

Listamos base de datos en contenedor docker:
next=# \l
                                            
 List of databases
   Name    | Owner | Encoding |  Collate   |
   Ctype    | ICU Locale | Locale Provider |
 Access privileges 
-----------+-------+----------+------------+
------------+------------+-----------------+
-------------------
 gorm      | next  | UTF8     | en_US.utf8 |
 en_US.utf8 |            | libc            |
 
 next      | next  | UTF8     | en_US.utf8 |
 en_US.utf8 |            | libc            |
 
 postgres  | next  | UTF8     | en_US.utf8 |
 en_US.utf8 |            | libc            |
 
 template0 | next  | UTF8     | en_US.utf8 |
 en_US.utf8 |            | libc            |
 =c/next          +
           |       |          |            |
            |            |                 |
 next=CTc/next
 template1 | next  | UTF8     | en_US.utf8 |
 en_US.utf8 |            | libc            |
 =c/next          +
           |       |          |            |
            |            |                 |
 next=CTc/next
(5 rows)

next=# 

Minuto 24 video Fazt: Go PostgreSQL REST API (gorilla/mux, gorm ORM) Golang


Para iniciar y ver conexion base de datos esta bien:
<◂> air .

  __    _   ___  
 / /\  | | | |_) 
/_/--\ |_| |_| \_ , built with Go 

watching .
watching db
watching routes
!exclude tmp
building...
running...
2023/05/05 17:56:14 Successfully connected to database
Servidor iniciado en http://localhost:8080


VER TABLAS desde contenedor docker:

gorm=# \d
            List of relations
 Schema |     Name     |   Type   | Owner 
--------+--------------+----------+-------
 public | tasks        | table    | next
 public | tasks_id_seq | sequence | next
 public | users        | table    | next
 public | users_id_seq | sequence | next
(4 rows)

gorm=# \d task
Did not find any relation named "task".
gorm=# \d tasks
                                       Table "public.tasks"
   Column    |           Type           | Collation | Nullable |              Def
ault              
-------------+--------------------------+-----------+----------+-----------------
------------------
 id          | bigint                   |           | not null | nextval('tasks_i
d_seq'::regclass)
 created_at  | timestamp with time zone |           |          | 
 updated_at  | timestamp with time zone |           |          | 
 deleted_at  | timestamp with time zone |           |          | 
 title       | text                     |           | not null | 
 description | text                     |           |          | 
 done        | boolean                  |           |          | false
 user_id     | bigint                   |           |          | 
Indexes:
    "tasks_pkey" PRIMARY KEY, btree (id)
    "idx_tasks_deleted_at" btree (deleted_at)

gorm=# 

gorm=# \d users
                                       Table "public.users"
   Column   |           Type           | Collation | Nullable |              Defa
ult              
------------+--------------------------+-----------+----------+------------------
-----------------
 id         | bigint                   |           | not null | nextval('users_id
_seq'::regclass)
 created_at | timestamp with time zone |           |          | 
 updated_at | timestamp with time zone |           |          | 
 deleted_at | timestamp with time zone |           |          | 
 first_name | text                     |           | not null | 
 last_name  | text                     |           | not null | 
 email      | text                     |           | not null | 
Indexes:
    "users_pkey" PRIMARY KEY, btree (id)
    "idx_users_deleted_at" btree (deleted_at)
    "idx_users_email" UNIQUE, btree (email)

gorm=# 

MINUTO 31:41 bien

Para iniciar y trabajar con una base de datos específica, debes seleccionarla utilizando el comando "USE" en el intérprete de comandos "psql".

En tu caso, si deseas trabajar con la base de datos "gorm", debes ejecutar el siguiente comando después de iniciar el intérprete de comandos "psql" y listar las bases de datos:

r

\c gorm


////////////////////

Metodo GET para ver todos usuarios base de datos:
Con thunderClient:
http://localhost:8080/users

Respuesta:

[
  {
    "ID": 1,
    "CreatedAt": "2023-05-06T13:46:18.054733+02:00",
    "UpdatedAt": "2023-05-06T13:46:18.054733+02:00",
    "DeletedAt": null,
    "first_name": "",
    "last_name": "",
    "email": "Joe@gmail.com",
    "tasks": null
  },
  {
    "ID": 2,
    "CreatedAt": "2023-05-06T13:46:38.647484+02:00",
    "UpdatedAt": "2023-05-06T13:46:38.647484+02:00",
    "DeletedAt": null,
    "first_name": "",
    "last_name": "",
    "email": "Maria@gmail.com",
    "tasks": null
  },
  {
    "ID": 3,
    "CreatedAt": "2023-05-06T14:07:48.333415+02:00",
    "UpdatedAt": "2023-05-06T14:07:48.333415+02:00",
    "DeletedAt": null,
    "first_name": "",
    "last_name": "",
    "email": "Luis@gmail.com",
    "tasks": null
  },
  {
    "ID": 5,
    "CreatedAt": "2023-05-06T14:08:21.023325+02:00",
    "UpdatedAt": "2023-05-06T14:08:21.023325+02:00",
    "DeletedAt": null,
    "first_name": "Luis2",
    "last_name": "Domaa2",
    "email": "Luis2@gmail.com",
    "tasks": null
  },
  {
    "ID": 6,
    "CreatedAt": "2023-05-06T14:09:49.459308+02:00",
    "UpdatedAt": "2023-05-06T14:09:49.459308+02:00",
    "DeletedAt": null,
    "first_name": "Luis24",
    "last_name": "Domaa24",
    "email": "Luis24@gmail.com",
    "tasks": null
  }
]


Con POST añadimos:

http://localhost:8080/users:

EN EL Body thunderclient:
POST
{
  "first_name": "Luis24",
  "last_name":"Domaa24",
  "email": "Luis24@gmail.com"
}
Nos añade usuario

Para ver un usuario por ID:
Con thunderCliend:
GET
http://localhost:8080/users/1

Resutado:
{
  "ID": 1,
  "CreatedAt": "2023-05-06T13:46:18.054733+02:00",
  "UpdatedAt": "2023-05-06T13:46:18.054733+02:00",
  "DeletedAt": null,
  "first_name": "",
  "last_name": "",
  "email": "Joe@gmail.com",
  "tasks": []
}

//////////////////////

Ver tabla ususarios:

gorm=# \dt users
       List of relations
 Schema | Name  | Type  | Owner 
--------+-------+-------+-------
 public | users | table | next
(1 row)

gorm=# 

///////////////////

Instalar godot:
<◂> go get github.com/joho/godotenv
go: downloading github.com/joho/godotenv v1.5.1
go: added github.com/joho/godotenv v1.5.1
<◂> 

go get github.com/NEBULA1978/go-postgresql-restapi/models


